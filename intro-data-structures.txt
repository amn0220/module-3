1. A line of people at an amusement park ride.

The line is composed of members, represented as strings.
There is a front to the line, as well as a back.
When someone enters the line, place them at the end.
People may leave the line whenever they see fit, and those behind them take their place.
Given the above real-world information, use an array data structure to code the following solution.

a) Use an array input: ["Vivian", "Ava", "Josh", "Patrick", "Mike"]
b) Insert a new person, "Mary" at the end of the line. In other words, you should insert Mary after Mike.
c) Find a person in line named "Josh." This function should return the position of 2 in the array, (recall that arrays are 0-based).
d) Find a person in line named "Emily." What should your function return if it does not find the item in the array?
e) What if Ava wants to allow a friend, "Melissa", to cut in line in front of her? How would you code this so Melissa appears before Ava?
f) If Patrick wants to leave the line, how would you delete him from the array?

class RideLine {
  constructor(name){
    this.name = [];
  }

  addPerson(name){
    this.name.push(name);
  }

  findPerson(name){
    for (let i = 0; i < this.name.length; i++){
      if (this.name[i] === name) {
      console.log (name + " is number" + " " + i + " in line.");
      } else {
          console.log (name + " is not in line for this ride.");
      }
    }
  }

  cutInLine(name){
     this.name.splice(1, 0, name);
     console.log(this.name + ":" + " Beware! A line cutter is in your midst!");
   }

  leaveLine(name){
     let index = this.name.indexOf(name);
     if (index !== name) {
     this.name.splice(4, 1)
     }
     console.log("Hey! " + this.name + "..." + " A scaredy cat left the line!");
   }

}
let line = new RideLine();

line.addPerson("Vivian");
line.addPerson("Ava");
line.addPerson("Josh");
line.addPerson("Patrick");
line.addPerson("Mike");


line.findPerson("Josh");
line.findPerson("Emily");

line.cutInLine("Melissa");

line.leaveLine("Patrick");


2. Provide another real-world example that you can model using a data structure.

Another example that could use a data structure could be like when you call the DMV and you are a certain place in the call queue. Sometimes people hang up and sometimes the employees may receive another task before getting to your call.

3. How would your data structure allow developers to access and manipulate the data?

Developers could see who is waiting to speak with a DMV representative and perhaps add more DMV employees to answer phone calls to reduce wait times or even see how quickly the employees take and complete calls by comparing lists for employees at certain time intervals. Like, DMV employee Ashley had 15 people waiting to talk to her at 3:00pm and at 3:15pm, only 5 people were waiting to talk to her. The developers could see who gave up and hung up their phones and who Ashley got through to and maybe even how long she talked to each customer.