#EXERCISES

1. What is time complexity and what is its relation to algorithms?

Time complexity is the metric used to describe how efficient an algorithm is.

2. What is runtime?

Runtime is the time it takes to run an algorithm.

3. How is the runtime of an algorithm calculated?

The runtime of an algorithm is calculated by adding up the number of instructions in an algorithm as a function of its input. Then the expression is simplified to its largest term.

4. Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.

^ MOST EFFICIENT
- Constant
- Logarithmic
- Linear
- Log-linear
- Quadratic 
———> CUBIC GROWTH RATE <——— 
- Exponential
v LEAST EFFICIENT

5. Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

A real life situation for a linear growth rate is: a mail delivery person receives an amount of mail (e.g. 100 letters) from the head post office and needs to deliver all mail (100 letters). More mail would increase the runtime and less mail would increase the runtime; however, with each piece making a nominal difference.

6. Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

time complexity = O(n)

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION

7. Determine the time complexity of the following snippet of code.

If you get stuck, read through the graphical representation section again.

time complexity = O(n^2)

FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION

8. Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

time complexity = O(2^n)

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

9.Out of the code snippets you just saw, which is the most time efficient?

The most efficient is the snippet in number 6 because O(n) has a more efficient runtime than the other two.