#Exercises
1. What are some pros and cons of using linked lists instead of arrays?

Pros: Linked lists can be HUGE! Nodes are independent and can be stored anywhere in the OS, which allows them to occupy memory wherever
Cons: Unable to search elements by index/must search from beginning of node series which can take a while in a huge linked list, elements must always be searched starting with the head element

2. Come up with a real world example of a linked list.

A real world example of a linked list would be a collection of Harry Potter books.  One points to the next but they arenâ€™t always stored together.

# Programming Questions

1. The Linked List push function should take a value, create a node, and add it to the end of a list. Below is a push function for a singly linked list. However, there is something wrong with it. Find the bug and fix the code.
```
LinkedList.prototype.push = function(element) {
 SET node = {
   value: element,
   next: null
 }

 IF the head node does not exist
   THEN SET head to node
 ELSE
   SET current node to head
   WHILE current.next !== null
	SET current node to current.next
   END WHILE
   SET current.next to node
 }
}
```
2. Given an unsorted singly linked list, remove all duplicates from the linked list.
Example
Input: a -> c -> d -> d -> a
Output: a -> c -> d

function LinkedList () {
  this.head = null;
}

LinkedList.prototype.removeDuplicates = function(){
   if (!this.head || !this.head.next){	
       console.log("No duplicates found");
       return;
   }
   
   var element1;
   var element2;
   var element3;
   var value;
   element2 = this.head;

  while(element2) {
    value = element2.data;
    element1 = element2;
    element3 = element1.next;

    while(element3){
      if (element3.data === value){
        element1.next = element3.next;
      } else {
        element1 = element3;
      }
      element3 = element3.next;
    }
    element2 = element2.next;
  }
};

3. Given an unsorted singly linked list, reverse it.
Example
Input: a -> b -> c -> d
Output: d -> c -> b -> a


LinkedList.prototype.reverse = function (){
   var previousElement = null;
   var currentElement = this.head;

   while (currentElement){
      var temporaryElement = currentElement.next;
      currentElement.next = previousElement;
      previousElement = currentElement;
      currentElement = temporaryElement;
   }

   this.head  = previousElement;
   return this.head;
};